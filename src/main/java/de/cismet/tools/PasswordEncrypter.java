/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.tools;

import net.sourceforge.blowfishj.BlowfishEasy;

import org.apache.log4j.Logger;

import java.io.IOException;
import java.io.InputStream;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.PBEParameterSpec;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 * DOCUMENT ME!
 *
 * @author   thorsten.hell@cismet.de
 * @version  $Revision$, $Date$
 */
// FIXME: encoding, random wipe bytes
public class PasswordEncrypter extends javax.swing.JFrame {

    //~ Static fields/initializers ---------------------------------------------

    private static final transient Logger LOG = Logger.getLogger(PasswordEncrypter.class);

    @Deprecated
    public static String CRYPT_PREFIX = "crypt::";                       // NOI18N
    @Deprecated
    private static final char[] MASTER_PASS = "fourtytwo".toCharArray(); // NOI18N

    private static final String PBE_ALGORITHM = "PBEWithMD5AndDES";
    private static final char[] PE_MASTERKEY_PROP = "PasswordEncrypter.masterKey".toCharArray(); // NOI18N
    private static final char[] PE_SALT_PROP = "PasswordEncrypter.salt".toCharArray();           // NOI18N
    private static final int ITERATIONS = 20;
    private static final int LF = 10;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdGo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPasswordField pwfPassword1;
    private javax.swing.JPasswordField pwfPassword2;
    private javax.swing.JTextArea txtCode;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form PasswordEncrypter.
     */
    public PasswordEncrypter() {
        initComponents();
        getRootPane().setDefaultButton(cmdGo);
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        cmdGo = new javax.swing.JButton();
        txtCode = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        pwfPassword1 = new javax.swing.JPasswordField();
        pwfPassword2 = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(PasswordEncrypter.class, "PasswordEncrypter.title")); // NOI18N
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("MS Sans Serif", 1, 12)); // NOI18N
        jLabel1.setText(org.openide.util.NbBundle.getMessage(
                PasswordEncrypter.class,
                "PasswordEncrypter.jLabel1.text"));                 // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 11, 3);
        getContentPane().add(jLabel1, gridBagConstraints);

        cmdGo.setText(org.openide.util.NbBundle.getMessage(PasswordEncrypter.class, "PasswordEncrypter.cmdGo.text")); // NOI18N
        cmdGo.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    cmdGoActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(cmdGo, gridBagConstraints);

        txtCode.setLineWrap(true);
        txtCode.setRows(3);
        txtCode.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(txtCode, gridBagConstraints);

        jLabel2.setText(org.openide.util.NbBundle.getMessage(
                PasswordEncrypter.class,
                "PasswordEncrypter.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        getContentPane().add(jLabel2, gridBagConstraints);

        jLabel3.setText(org.openide.util.NbBundle.getMessage(
                PasswordEncrypter.class,
                "PasswordEncrypter.jLabel3.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        getContentPane().add(jLabel3, gridBagConstraints);

        jLabel4.setText(org.openide.util.NbBundle.getMessage(
                PasswordEncrypter.class,
                "PasswordEncrypter.jLabel4.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        getContentPane().add(jLabel4, gridBagConstraints);

        pwfPassword1.addFocusListener(new java.awt.event.FocusAdapter() {

                @Override
                public void focusGained(final java.awt.event.FocusEvent evt) {
                    pwfPassword1FocusGained(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(pwfPassword1, gridBagConstraints);

        pwfPassword2.addFocusListener(new java.awt.event.FocusAdapter() {

                @Override
                public void focusGained(final java.awt.event.FocusEvent evt) {
                    pwfPassword2FocusGained(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(pwfPassword2, gridBagConstraints);

        final java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width - 398) / 2, (screenSize.height - 183) / 2, 398, 183);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void pwfPassword2FocusGained(final java.awt.event.FocusEvent evt) { //GEN-FIRST:event_pwfPassword2FocusGained
        pwfPassword2.setSelectionStart(0);
        pwfPassword2.setSelectionEnd(pwfPassword1.getPassword().length);
    }                                                                           //GEN-LAST:event_pwfPassword2FocusGained

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void pwfPassword1FocusGained(final java.awt.event.FocusEvent evt) { //GEN-FIRST:event_pwfPassword1FocusGained
        pwfPassword1.setSelectionStart(0);
        pwfPassword1.setSelectionEnd(pwfPassword1.getPassword().length);
    }                                                                           //GEN-LAST:event_pwfPassword1FocusGained

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void cmdGoActionPerformed(final java.awt.event.ActionEvent evt) {                        //GEN-FIRST:event_cmdGoActionPerformed
        final String p1 = new String(pwfPassword1.getPassword());
        final String p2 = new String(pwfPassword2.getPassword());
        if (p1.equals(p2)) {
            try {
                txtCode.setText(String.valueOf(encrypt(pwfPassword1.getPassword())));
            } catch (final PasswordEncrypterException ex) {
                txtCode.setText("exception during encryption: " + ex);
            }
        } else {
            JOptionPane.showMessageDialog(
                this,
                org.openide.util.NbBundle.getMessage(
                    PasswordEncrypter.class,
                    "PasswordEncrypter.cmdGoActionPerformed(ActionEvent).JOptionPane_anon.message"), // NOI18N
                org.openide.util.NbBundle.getMessage(
                    PasswordEncrypter.class,
                    "PasswordEncrypter.cmdGoActionPerformed(ActionEvent).JOptionPane_anon.title"),   // NOI18N
                JOptionPane.ERROR_MESSAGE);
            pwfPassword1.setText("");                                                                // NOI18N
            pwfPassword2.setText("");                                                                // NOI18N
        }
    }                                                                                                //GEN-LAST:event_cmdGoActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  args  the command line arguments
     */
    public static void main(final String[] args) {
        java.awt.EventQueue.invokeLater(new Runnable() {

                @Override
                public void run() {
                    try {
                        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    } catch (final Exception e) {
                        e.printStackTrace();
                    }
                    new PasswordEncrypter().setVisible(true);
                }
            });
    }

    /**
     * DOCUMENT ME!
     *
     * @param   code  DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     *
     * @throws  PasswordEncrypterException  DOCUMENT ME!
     */
    @Deprecated
    public static String decryptString(String code) throws PasswordEncrypterException {
        if ((code != null) && code.startsWith(CRYPT_PREFIX)) {
            final BlowfishEasy blowfish = new BlowfishEasy(MASTER_PASS);
            code = code.substring(CRYPT_PREFIX.length(), code.length());
            return blowfish.decryptString(code);
        } else {
            return code;
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @param   pwd  DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     *
     * @throws  PasswordEncrypterException  DOCUMENT ME!
     */
    @Deprecated
    public static String encryptString(final String pwd) throws PasswordEncrypterException {
        final BlowfishEasy blowfish = new BlowfishEasy(MASTER_PASS);
        final String code = CRYPT_PREFIX + blowfish.encryptString(pwd);

        return code;
    }

    /**
     * DOCUMENT ME!
     *
     * @param   string  DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     *
     * @throws  PasswordEncrypterException  DOCUMENT ME!
     */
    public static char[] encrypt(final char[] string) throws PasswordEncrypterException {
        return applyCipher(string, Cipher.ENCRYPT_MODE);
    }

    /**
     * DOCUMENT ME!
     *
     * @param   string  DOCUMENT ME!
     * @param   mode    DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     *
     * @throws  PasswordEncrypterException  DOCUMENT ME!
     */
    private static char[] applyCipher(final char[] string, final int mode) {
        // FIXME: non-ASCII handling
        Cipher pbeCipher = null;
        SecretKey pbeKey = null;
        try {
            final SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(PBE_ALGORITHM);
            pbeKey = keyFactory.generateSecret(new PBEKeySpec(getMasterPw()));
            pbeCipher = Cipher.getInstance(PBE_ALGORITHM);
            pbeCipher.init(mode, pbeKey, new PBEParameterSpec(getSalt(), ITERATIONS));

            final byte[] bytes = new byte[string.length];
            // we don't know if System.arraycopy() creates traces in memory
            for (int i = 0; i < string.length; ++i) {
                bytes[i] = (byte)string[i];
            }

            final byte[] res = pbeCipher.doFinal(bytes);

            // wipe the tmp array
            for (int i = 0; i < bytes.length; ++i) {
                bytes[i] = 0;
            }

            final char[] ret = new char[res.length];
            for (int i = 0; i < res.length; ++i) {
                // copy and wipe
                ret[i] = (char)res[i];
                res[i] = 0;
            }

            return ret;
        } catch (final Exception ex) {
            final String message = "cannot process string: mode=" + mode; // NOI18N
            LOG.error(message, ex);
            throw new PasswordEncrypterException(message, ex);
        } finally {
            // ensure re-init for wiping the cipher, when the cipher is initialised, the key is initialised, too
            if (pbeCipher != null) {
                try {
                    pbeCipher.init(mode, pbeKey, new PBEParameterSpec(getSalt(), ITERATIONS));
                } catch (final Exception ex) {
                    LOG.warn("cannot re-init the cipher", ex); // NOI18N
                }
            }
        }
    }

    /**
     * Decrypts a given string that was created by {@link #encrypt(char[])}. The caller is responsible for wiping the
     * given parameter and the returned result himself.
     *
     * @param   string  the encrypted string
     *
     * @return  the decrypted string in a <code>char[]</code>
     *
     * @throws  PasswordEncrypterException  DOCUMENT ME!
     */
    public static char[] decrypt(final char[] string) throws PasswordEncrypterException {
        // for backwards compatibility
        final char[] cryptPrefix = CRYPT_PREFIX.toCharArray();
        boolean compatibilityDecrypt = true;
        if (string.length >= cryptPrefix.length) {
            for (int i = 0; i < cryptPrefix.length; ++i) {
                if (string[i] != cryptPrefix[i]) {
                    compatibilityDecrypt = false;
                    break;
                }
            }
        }

        if (compatibilityDecrypt) {
            return decryptString(String.valueOf(string)).toCharArray();
        } else if (('{' == string[0]) && ('}' == string[string.length - 1])) {
            final char[] chars = new char[string.length - 2];
            // we don't know if System.arraycopy() creates traces in memory
            for (int i = 0; i < (string.length - 2); ++i) {
                chars[i] = string[i + 1];
            }

            final char[] ret = applyCipher(chars, Cipher.DECRYPT_MODE);

            for (int i = 0; i < chars.length; ++i) {
                // wipe
                chars[i] = 0;
            }

            return ret;
        } else {
            return string;
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     *
     * @throws  PasswordEncrypterException  DOCUMENT ME!
     */
    private static char[] getMasterPw() throws PasswordEncrypterException {
        final InputStream peStream = PasswordEncrypter.class.getResourceAsStream("PasswordEncrypter.properties");

        if (peStream == null) {
            final String message = "PasswordEncrypter properties not present"; // NOI18N
            LOG.error(message);
            throw new PasswordEncrypterException(message);
        } else {
            // we deal with base64 only
            final byte[] bytes = safeRead(peStream, PE_MASTERKEY_PROP);
            final char[] chars = new char[bytes.length];

            for (int i = 0; i < bytes.length; ++i) {
                // copy and wipe
                chars[i] = (char)bytes[i];
                bytes[i] = 0;
            }

            return chars;
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     *
     * @throws  PasswordEncrypterException  DOCUMENT ME!
     */
    private static byte[] getSalt() throws PasswordEncrypterException {
        final InputStream peStream = PasswordEncrypter.class.getResourceAsStream("PasswordEncrypter.properties");

        if (peStream == null) {
            final String message = "PasswordEncrypter properties not present"; // NOI18N
            LOG.error(message);
            throw new PasswordEncrypterException(message);
        } else {
            return safeRead(peStream, PE_SALT_PROP);
        }
    }

    /**
     * Reads a property as safe as possible. This operation is completely char[] based and won't put any property values
     * into {@link String} objects. The given stream will be used as is, it won't be closed nor reset. However, if the
     * {@link InputStream#read()} operation of this implementation will change some markers or similar they won't be
     * reset, too.
     *
     * <p>IMPORTANT: Properties are supposed to be separated by a single '=' and terminated by a line feed or EOF.</p>
     *
     * @param   propertyStream  the stream to read from
     * @param   property        the property to read
     *
     * @return  the value of the property in a <code>byte[]</code>
     *
     * @throws  PasswordEncrypterException  DOCUMENT ME!
     */
    public static byte[] safeRead(final InputStream propertyStream, final char[] property)
            throws PasswordEncrypterException {
        // TODO: optimise parser
        try {
            int c;
            int mark = 0;
            boolean comment = false;
            boolean firstChar = true;

            while ((c = propertyStream.read()) > 0) {
                if (firstChar && (c == '#')) {
                    comment = true;
                    firstChar = false;
                } else if (c == LF) {
                    firstChar = true;
                    comment = false;
                } else if (comment) {
                    firstChar = false;
                } else if ((property.length > mark) && (c == property[mark])) {
                    firstChar = false;
                    mark++;
                } else if ((c == '=') && (property.length == mark)) {
                    // read the property value
                    byte[] chars = new byte[100];

                    int p;
                    int index = 0;
                    while (((p = propertyStream.read()) > 0) && (p != LF)) {
                        chars[index] = (byte)p;
                        index++;

                        final byte[] tmp = new byte[chars.length + 100];
                        if (index == chars.length) {
                            // resize and wipe
                            for (int i = 0; i < chars.length; ++i) {
                                tmp[i] = chars[i];
                                chars[i] = 0;
                            }

                            chars = tmp;
                        }
                    }

                    // resize
                    final byte[] tmp = new byte[index];
                    for (int i = 0; i < tmp.length; ++i) {
                        // copy and wipe
                        tmp[i] = chars[i];
                        chars[i] = 0;
                    }

                    return tmp;
                } else {
                    // mismatching property key, reset marker
                    mark = 0;
                    firstChar = false;
                }
            }
        } catch (final IOException ex) {
            final String message = "cannot read password from properties"; // NOI18N
            LOG.error(message, ex);
            throw new PasswordEncrypterException(message, ex);
        }

        return null;
    }
}
